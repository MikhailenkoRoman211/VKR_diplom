from __future__ import annotations

import threading
import datetime
import calendar
import tkinter as tk
from pathlib import Path
from tkinter import filedialog, messagebox, ttk

import matplotlib
import matplotlib.figure as mpf
import numpy as np
import pandas as pd
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk

import ttkbootstrap as tb  # pip install ttkbootstrap

from data_collector import DataCollector
from data_processor import DataProcessor
from model_manager import ModelManager
from optimizer import Optimizer

matplotlib.use("Agg")


class ToolTip:
    """–ü—Ä–æ—Å—Ç–æ–π tooltip –¥–ª—è –ª—é–±–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞."""
    def __init__(self, widget, text: str):
        self.widget = widget
        self.text = text
        self.tipwindow: tk.Toplevel | None = None
        widget.bind("<Enter>", self._show)
        widget.bind("<Leave>", self._hide)

    def _show(self, event=None):
        if self.tipwindow:
            return
        x = self.widget.winfo_rootx() + 20
        y = self.widget.winfo_rooty() + self.widget.winfo_height() + 1
        self.tipwindow = tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)
        tw.wm_geometry(f"+{x}+{y}")
        lbl = ttk.Label(
            tw, text=self.text, justify="left",
            background="lightyellow", relief="solid", borderwidth=1
        )
        lbl.pack(ipadx=4, ipady=2)

    def _hide(self, event=None):
        if self.tipwindow:
            self.tipwindow.destroy()
            self.tipwindow = None


class CalendarDialog(tk.Toplevel):
    """–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞–¥ –æ–∫–Ω–æ–º-—Ä–æ–¥–∏—Ç–µ–ª–µ–º."""
    def __init__(self, master, entry: ttk.Entry):
        super().__init__(master)
        self.entry = entry
        self.transient(master)
        self.title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É")
        self.resizable(False, False)

        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ –ø–æ–ª—è, –∏–Ω–∞—á–µ ‚Äî —Å–µ–≥–æ–¥–Ω—è
        try:
            d = datetime.datetime.strptime(entry.get(), "%Y-%m-%d").date()
        except Exception:
            d = datetime.date.today()
        self.year, self.month = d.year, d.month

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ—Å—è—Ü–µ–≤
        header = ttk.Frame(self)
        header.pack(padx=10, pady=5)
        ttk.Button(header, text="<", width=2, command=self._prev_month).pack(side="left")
        self.lbl_month = ttk.Label(header, text="")
        self.lbl_month.pack(side="left", padx=12)
        ttk.Button(header, text=">", width=2, command=self._next_month).pack(side="left")

        # –§—Ä–µ–π–º –¥–Ω–µ–π
        self.frm_days = ttk.Frame(self)
        self.frm_days.pack(padx=10, pady=5)

        self._build_calendar()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞–¥ master
        self.update_idletasks()
        mx = master.winfo_rootx()
        my = master.winfo_rooty()
        mw = master.winfo_width()
        mh = master.winfo_height()
        w = self.winfo_width()
        h = self.winfo_height()
        x = mx + (mw - w) // 2
        y = my + (mh - h) // 2
        self.geometry(f"+{x}+{y}")

    def _build_calendar(self):
        self.lbl_month.config(text=f"{calendar.month_name[self.month]} {self.year}")
        for w in self.frm_days.winfo_children():
            w.destroy()
        days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        for idx, d in enumerate(days):
            ttk.Label(self.frm_days, text=d).grid(row=0, column=idx, padx=2, pady=2)
        monthcal = calendar.monthcalendar(self.year, self.month)
        for r, week in enumerate(monthcal, start=1):
            for c, day in enumerate(week):
                if day == 0:
                    ttk.Label(self.frm_days, text=" ").grid(row=r, column=c, padx=2, pady=2)
                else:
                    btn = ttk.Button(
                        self.frm_days, text=f"{day:2d}", width=3,
                        command=lambda d=day: self._select_day(d)
                    )
                    btn.grid(row=r, column=c, padx=1, pady=1)

    def _prev_month(self):
        if self.month == 1:
            self.month = 12
            self.year -= 1
        else:
            self.month -= 1
        self._build_calendar()

    def _next_month(self):
        if self.month == 12:
            self.month = 1
            self.year += 1
        else:
            self.month += 1
        self._build_calendar()

    def _select_day(self, day: int):
        date_str = f"{self.year:04d}-{self.month:02d}-{day:02d}"
        self.entry.delete(0, "end")
        self.entry.insert(0, date_str)
        self.destroy()


def run_async(fn):
    def wrapper(*args, **kwargs):
        threading.Thread(target=fn, args=args, kwargs=kwargs, daemon=True).start()
    return wrapper


class App(tb.Window):
    def __init__(self):
        super().__init__(themename="litera")
        self.title("–ú–æ–¥–µ–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
        self.geometry("900x620")
        self.columnconfigure(0, weight=1)
        self.rowconfigure(0, weight=1)

        # –í–∫–ª–∞–¥–∫–∏
        self.nb = ttk.Notebook(self)
        self.nb.grid(row=0, column=0, sticky="nsew")

        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_bar = ttk.Label(self, text="–ì–æ—Ç–æ–≤–æ", relief="sunken", anchor="w")
        self.status_bar.grid(row=1, column=0, sticky="ew")

        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.raw_df: pd.DataFrame | None = None
        self.X: pd.DataFrame | None = None
        self.y: pd.Series | None = None
        self.mm: ModelManager | None = None
        self.y_pred: np.ndarray | None = None
        self.weights: pd.Series | None = None

        self._build_tab_data()
        self._build_tab_portfolio()
        self._build_tab_model()
        self._add_tooltips_and_validation()

    def _build_tab_data(self):
        tab = ttk.Frame(self.nb)
        self.nb.add(tab, text="–î–∞–Ω–Ω—ã–µ")
        for c in range(4):
            tab.columnconfigure(c, weight=1)

        # –° (–¥–∞—Ç–∞)
        ttk.Label(tab, text="–° (–ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨)").grid(
            row=0, column=0, sticky="w", padx=8, pady=6
        )
        self.ent_from = ttk.Entry(tab)
        self.ent_from.insert(0, "2009-01-01")
        self.ent_from.grid(row=0, column=1, sticky="ew", padx=8)
        ttk.Button(tab, text="üìÖ", width=2,
                   command=lambda: CalendarDialog(self, self.ent_from))\
            .grid(row=0, column=2, sticky="w")

        # –ü–æ (–¥–∞—Ç–∞)
        ttk.Label(tab, text="–ü–æ").grid(
            row=1, column=0, sticky="w", padx=8, pady=6
        )
        self.ent_to = ttk.Entry(tab)
        self.ent_to.insert(0, "2022-01-31")
        self.ent_to.grid(row=1, column=1, sticky="ew", padx=8)
        ttk.Button(tab, text="üìÖ", width=2,
                   command=lambda: CalendarDialog(self, self.ent_to))\
            .grid(row=1, column=2, sticky="w")

        # –õ–∏—Å—Ç–∏–Ω–≥
        ttk.Label(tab, text="–õ–∏—Å—Ç–∏–Ω–≥").grid(row=0, column=3, sticky="w")
        self.combo_lvl = ttk.Combobox(
            tab, values=[1, 2, "1+2"], state="readonly", width=7
        )
        self.combo_lvl.set("1")
        self.combo_lvl.grid(row=0, column=3, sticky="e", padx=8)

        # –¢–∏–∫–µ—Ä—ã (—Å–¥–≤–∏–Ω—É—Ç–æ –ø–æ–¥ –¥–∞—Ç—ã)
        ttk.Label(tab, text="–¢–∏–∫–µ—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)").grid(
            row=2, column=0, sticky="w", padx=8, pady=(12,0)
        )
        self.ent_tickers = ttk.Entry(tab)
        self.ent_tickers.grid(row=2, column=1, columnspan=3, sticky="ew", padx=8, pady=(12,0))

        # –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä –∏ –º–µ—Ç–∫–∞
        self.prog = ttk.Progressbar(tab, mode="indeterminate")
        self.prog.grid(row=3, columnspan=4, sticky="ew", padx=8, pady=15)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        ttk.Button(tab, text="–°–æ–±—Ä–∞—Ç—å", command=self.collect_async)\
            .grid(row=5, column=1, padx=6, pady=10)
        ttk.Button(tab, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", command=self.load_csv)\
            .grid(row=5, column=2, padx=6, pady=10)

    @run_async
    def collect_async(self):
        self.after(0, lambda: self.status_bar.config(text="–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö‚Ä¶"))
        try:
            lvls = (1, 2) if self.combo_lvl.get() == "1+2" else (int(self.combo_lvl.get()),)
            custom = [s.strip().upper() for s in self.ent_tickers.get().split(",") if s.strip()]
            self.prog.start(12)
            dc = DataCollector(
                self.ent_from.get(), self.ent_to.get(),
                listing_levels=lvls, custom_secids=custom or None
            )
            self.raw_df = dc.collect()
            dc.save_csv("history.csv")
            self.after(0, lambda: self.status_bar.config(
                text=f"–°–æ–±—Ä–∞–Ω–æ {len(self.raw_df)} —Å—Ç—Ä–æ–∫ ‚Üí history.csv"
            ))
        except Exception as e:
            self.after(0, lambda: self.status_bar.config(text="–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"))
            messagebox.showerror("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞", str(e))
        finally:
            self.prog.stop()

    def load_csv(self):
        self.status_bar.config(text="–ó–∞–≥—Ä—É–∑–∫–∞ CSV‚Ä¶")
        path = filedialog.askopenfilename(
            title="–í—ã–±—Ä–∞—Ç—å CSV-—Ñ–∞–π–ª",
            filetypes=[("CSV", "*.csv;*.txt")]
        )
        if not path:
            self.status_bar.config(text="–ì–æ—Ç–æ–≤–æ")
            return
        try:
            df = pd.read_csv(
                path, sep=";", encoding="utf-8-sig",
                parse_dates=["TRADEDATE"]
            )
            for col in ("MARKETPRICE3", "CLOSE"):
                if col in df.columns:
                    df[col] = (
                        df[col].astype(str)
                            .str.replace('="', '', regex=False)
                            .str.replace('"',  '', regex=False)
                            .replace('', np.nan)
                            .astype(float)
                    )
            if "VOLUME" in df.columns:
                df["VOLUME"] = pd.to_numeric(df["VOLUME"], errors="coerce")
            self.raw_df = df
            fname = Path(path).name
            self.status_bar.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ {fname}")
        except Exception as e:
            self.status_bar.config(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV")
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV", str(e))

    def _build_tab_portfolio(self):
        tab = ttk.Frame(self.nb)
        self.nb.add(tab, text="–ü–æ—Ä—Ç—Ñ–µ–ª—å")
        tab.columnconfigure(1, weight=1)
        tab.rowconfigure(1, weight=1)

        ttk.Label(tab, text="–°–∫–æ–ª—å–∫–æ –±—É–º–∞–≥ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ").grid(
            row=0, column=0, sticky="w", padx=8)
        self.spin_topn = ttk.Spinbox(tab, from_=1, to=50, width=6)
        self.spin_topn.set(10)
        self.spin_topn.grid(row=0, column=1, sticky="w", padx=8)

        ttk.Button(tab, text="–ü—Ä–æ–≥–Ω–æ–∑ + –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å", command=self.opt_async)\
            .grid(row=0, column=2, padx=8, pady=10)

        self.tree = ttk.Treeview(tab, columns=("weight",), show="headings", height=14)
        self.tree.heading("weight", text="–¢–ò–ö–ï–† : —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö")
        self.tree.grid(row=1, column=0, columnspan=2, sticky="nsew", padx=8, pady=8)

        self.fig = mpf.Figure(figsize=(4, 3))
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=tab)
        self.canvas.get_tk_widget().grid(
            row=1, column=2, sticky="nsew", padx=8, pady=8
        )
        toolbar_frame = ttk.Frame(tab)
        toolbar_frame.grid(row=2, column=2, sticky="ew", padx=8)
        toolbar = NavigationToolbar2Tk(self.canvas, toolbar_frame)
        toolbar.update()

    @run_async
    def opt_async(self):
        self.after(0, lambda: self.status_bar.config(text="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è‚Ä¶"))
        if self.mm is None:
            messagebox.showwarning("–ù–µ—Ç –º–æ–¥–µ–ª–∏", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")
            self.after(0, lambda: self.status_bar.config(text="–ì–æ—Ç–æ–≤–æ"))
            return
        if self.X is None or self.y is None:
            if self.raw_df is None:
                messagebox.showwarning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
                self.after(0, lambda: self.status_bar.config(text="–ì–æ—Ç–æ–≤–æ"))
                return
            n_lags = int(self.spin_lags.get())
            ma_tuple = tuple(int(x.strip()) for x in self.ent_ma.get().split(",") if x.strip())
            proc = DataProcessor(n_lags=n_lags, ma_windows=ma_tuple, vol_windows=(ma_tuple[0],))
            self.X, self.y = proc.transform(self.raw_df)

        try:
            topn = int(self.spin_topn.get())
            self.y_pred = self.mm.predict(self.X)
            opt = Optimizer(self.X, self.y_pred, self.raw_df, lookback=252, top_n=topn)
            self.weights = opt.compute()
            opt.save_report(self.weights, "portfolio_report.xlsx")

            self.tree.delete(*self.tree.get_children())
            for secid, w in self.weights.items():
                self.tree.insert("", "end", values=(f"{secid}: {w:.3%}",))

            self.ax.clear()
            self.ax.bar(self.weights.index, self.weights.values)
            self.ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {topn} —Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ")
            self.ax.tick_params(axis="x", rotation=45)
            self.fig.tight_layout()
            self.canvas.draw_idle()

            self.after(0, lambda: self.status_bar.config(
                text="–ü–æ—Ä—Ç—Ñ–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Üí portfolio_report.xlsx"
            ))
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "portfolio_report.xlsx —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        except Exception as e:
            self.after(0, lambda: self.status_bar.config(text="–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"))
            messagebox.showerror("–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", str(e))

    def _build_tab_model(self):
        tab = ttk.Frame(self.nb)
        self.nb.add(tab, text="–ú–æ–¥–µ–ª—å")

        frm_btns = ttk.Frame(tab)
        frm_btns.pack(pady=12)
        ttk.Button(frm_btns, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", command=self.load_model).grid(row=0, column=0, padx=8)
        ttk.Button(frm_btns, text="–û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é", command=self.train_async).grid(row=0, column=1, padx=8)

        frm_opt = ttk.LabelFrame(tab, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", padding=8)
        frm_opt.pack(fill="x", padx=8)

        ttk.Label(frm_opt, text="n_lags").grid(row=0, column=0, padx=4, pady=4, sticky="w")
        self.spin_lags = ttk.Spinbox(frm_opt, from_=1, to=20, width=5)
        self.spin_lags.set(12)
        self.spin_lags.grid(row=0, column=1, pady=4)

        ttk.Label(frm_opt, text="MA –æ–∫–Ω–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)").grid(row=0, column=2, sticky="w")
        self.ent_ma = ttk.Entry(frm_opt, width=18)
        self.ent_ma.insert(0, "5,10,20,60")
        self.ent_ma.grid(row=0, column=3, padx=4, pady=4)

        self.lbl_metrics = ttk.Label(tab, text="‚Äî")
        self.lbl_metrics.pack(pady=10)

    def load_model(self):
        path = filedialog.askopenfilename(
            title="–í—ã–±—Ä–∞—Ç—å model.pkl",
            filetypes=[("Pickle-model", "*.pkl")],
            initialfile="model.pkl"
        )
        if not path:
            return
        try:
            self.mm = ModelManager.load(path)
            text = f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ¬∑ R¬≤={self.mm.r2_:.3f}  RMSE={self.mm.rmse_:.4f}"
            self.lbl_metrics.config(text=text)
            self.status_bar.config(text=text)
        except Exception as e:
            self.status_bar.config(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", str(e))

    @run_async
    def train_async(self):
        self.after(0, lambda: self.status_bar.config(text="–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏‚Ä¶"))
        if self.raw_df is None:
            messagebox.showwarning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
            self.after(0, lambda: self.status_bar.config(text="–ì–æ—Ç–æ–≤–æ"))
            return
        try:
            n_lags = int(self.spin_lags.get())
            ma_tuple = tuple(int(x.strip()) for x in self.ent_ma.get().split(",") if x.strip())
            proc = DataProcessor(n_lags=n_lags, ma_windows=ma_tuple, vol_windows=(ma_tuple[0],))
            self.X, self.y = proc.transform(self.raw_df)

            self.mm = ModelManager()
            self.mm.fit(self.X, self.y)
            self.mm.save("model.pkl")
            text = f"–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ ¬∑ R¬≤={self.mm.r2_:.3f}  RMSE={self.mm.rmse_:.4f}"
            self.lbl_metrics.config(text=text)
            self.after(0, lambda: self.status_bar.config(text=text))
        except Exception as e:
            self.after(0, lambda: self.status_bar.config(text="–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"))
            messagebox.showerror("–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è", str(e))

    def _add_tooltips_and_validation(self):
        ToolTip(self.ent_from,    "–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)")
        ToolTip(self.ent_to,      "–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è")
        ToolTip(self.combo_lvl,   "–£—Ä–æ–≤–µ–Ω—å –ª–∏—Å—Ç–∏–Ω–≥–∞: 1, 2 –∏–ª–∏ 1+2")
        ToolTip(self.ent_tickers, "–¢–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: AAPL, GOOG)")
        ToolTip(self.spin_topn,   "–°–∫–æ–ª—å–∫–æ –±—É–º–∞–≥ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ (1‚Äì50)")
        ToolTip(self.spin_lags,   "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–≥–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (1‚Äì20)")
        ToolTip(self.ent_ma,      "–û–∫–Ω–∞ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5,10,20)")

        for entry in (self.ent_from, self.ent_to):
            entry.bind("<FocusOut>", self._validate_date)
        vcmd = (self.register(self._validate_int), '%P')
        for sb in (self.spin_lags, self.spin_topn):
            sb.config(validate='key', validatecommand=vcmd)

    def _validate_date(self, event):
        w = event.widget
        val = w.get()
        try:
            datetime.datetime.strptime(val, "%Y-%m-%d")
            w.config(foreground="black")
            self.status_bar.config(text="–ì–æ—Ç–æ–≤–æ")
        except ValueError:
            w.config(foreground="red")
            self.status_bar.config(text=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {val}")

    def _validate_int(self, proposed: str):
        if proposed == "" or proposed.isdigit():
            return True
        self.bell()
        return False


if __name__ == "__main__":
    App().mainloop()
